plot(gam2)
gam2a=gam(I(wage>250)~s(age, df=4)+year+education, data=Wage, family=binomial)
anova(gam2a, gam2, test="Chisq")
par(mfrow=c(1,3))
lm1=lm(wage~ns(agem df=4)+ ns(year, df=4)+education, data=Wage)
lm1=lm(wage~ns(agem df=4)+ ns(year, df=4)+education, data=Wage)
lm1=lm(wage~ns(age, df=4)+ ns(year, df=4)+education, data=Wage)
plot.gam(lm1, se=T)
library(ISLR)
attach(Wage)
set.seed(1)
library(ISLR)
library(boot)
all.deltas = rep(NA, 10)
for (i in 1:10) {
glm.fit = glm(wage~poly(age, i), data=Wage)
all.deltas[i] = cv.glm(Wage, glm.fit, K=10)$delta[2]
}
plot(1:10, all.deltas, xlab="Degree", ylab="CV error", type="l", pch=20, lwd=2, ylim=c(1590, 1700))
min.point = min(all.deltas)
sd.points = sd(all.deltas)
abline(h=min.point + 0.2 * sd.points, col="red", lty="dashed")
abline(h=min.point - 0.2 * sd.points, col="red", lty="dashed")
legend("topright", "0.2-standard deviation lines", lty="dashed", col="red")
min.point = min(all.deltas)
min.point
which.min(all.deltas)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
require(ISLR)
require(boot)
plot(mpg~horsepower, data=Auto)
glm.fit=glm(mpg~horsepower, data=Auto)
cv.glm(Autom glm.fit)$delta
cv.glm(Auto, glm.fit)$delta
loocv=function(fit){
h = lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
loocv(glm.fit)
cv.error = rep(0,5)
degree = 1:5
for ( d in degree){
glm.fit=glm(mpg~poly(horsepower, d), data=Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
cv.error10 = rep(0,5)
for ( d in degree){
glm.fit=glm(mpg~poly(horsepower, d), data=Auto)
cv.error10[d] = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
lines(degree, cv.error10, type="b", col="red")
plot(degree, cv.error, type="b")
plot(degree, cv.error, type="b")
cv.error10 = rep(0,5)
for ( d in degree){
glm.fit=glm(mpg~poly(horsepower, d), data=Auto)
cv.error10[d] = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
lines(degree, cv.error10, type="b", col="red")
set.seed(1)
library(ISLR)
library(boot)
all.deltas = rep(NA, 10)
for (i in 1:10) {
glm.fit = glm(wage~poly(age, i), data=Wage)
all.deltas[i] = cv.glm(Wage, glm.fit, K=10)$delta[2]
}
plot(1:10, all.deltas, xlab="Degree", ylab="CV error", type="l", pch=20, lwd=2, ylim=c(1590, 1700))
min.point = min(all.deltas)
sd.points = sd(all.deltas)
abline(h=min.point + 0.2 * sd.points, col="red", lty="dashed")
abline(h=min.point - 0.2 * sd.points, col="red", lty="dashed")
legend("topright", "0.2-standard deviation lines", lty="dashed", col="red")
#' anova
fits.anova = rep(NA, 10)
for (i in 1:10) {
fits.anova[i] = glm(wage~poly(age, i), data=Wage)
}
for (i in 1:10) {
fits.anova[i] = glm(wage~poly(age, i), data=Wage)
}
rm(fits.anova)
for (i in 1:10) {
fits.anova[i] = glm(wage~poly(age, i), data=Wage)
}
fit.1 = lm(wage~poly(age, 1), data=Wage)
fit.2 = lm(wage~poly(age, 2), data=Wage)
fit.3 = lm(wage~poly(age, 3), data=Wage)
fit.4 = lm(wage~poly(age, 4), data=Wage)
fit.5 = lm(wage~poly(age, 5), data=Wage)
fit.6 = lm(wage~poly(age, 6), data=Wage)
fit.7 = lm(wage~poly(age, 7), data=Wage)
fit.8 = lm(wage~poly(age, 8), data=Wage)
fit.9 = lm(wage~poly(age, 9), data=Wage)
fit.10 = lm(wage~poly(age, 10), data=Wage)
anova(fit.1, fit.2, fit.3, fit.4, fit.5, fit.6, fit.7, fit.8, fit.9, fit.10)
plot(wage~age, data=Wage, col="darkgrey")
agelims = range(Wage$age)
age.grid = seq(from=agelims[1], to=agelims[2])
lm.fit = lm(wage~poly(age, 3), data=Wage)
lm.pred = predict(lm.fit, data.frame(age=age.grid))
lines(age.grid, lm.pred, col="blue", lwd=2)
plot(lm.fit)
lm.fit
library(PerMallows)
version
library(PerMallows)
v
version
install.packages('roxygen2')
library(PerMallows)
imports_for_undefined_globals <-
function(txt, lst, selective = TRUE)
{
if(!missing(txt))
lst <- scan(what = character(), text = txt, quiet = TRUE)
nms <- lapply(lst, find)
ind <- sapply(nms, length) > 0L
imp <- split(lst[ind], substring(unlist(nms[ind]), 9L))
if(selective) {
sprintf("importFrom(%s)",
vapply(Map(c, names(imp), imp),
function(e)
paste0("\"", e, "\"", collapse = ", "),
""))
} else {
sprintf("import(\"%s\")", names(imp))
}
}
txt <- "barplot col2rgb compareVersion cutree dev.cur dev.list dev.new
dev.off dev.set dist dnorm hclust head image na.omit par persp pie
polygon rect rnorm runif segments volcano write.table read.table"
writeLines(imports_for_undefined_globals(txt))
library(PerMallows)
library(PerMallows)
runif.permutation(perm.length = 8)
a = runif.permutation(perm.length = 8)
b = runif.permutation(perm.length = 8)
perm2decomp(compose(a, inverse.perm(b)))
perm2decomp(a)
perm2decomp(b)
c = runif.permutation(perm.length = 8)
perm2decomp(compose(b, inverse.perm(c)))
perm2decomp(compose(a, inverse.perm(c)))
sam 0 runif.permutation(n = 2, perm.length = 2)
sam = runif.permutation(n = 2, perm.length = 2)
sam
library(PerMallows)
n = 6; si=runif.permutation(1, n); ; s0=runif.permutation(1, n);; s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;compose(si, s0_1)
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1)
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); perm2decomp(comp);
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); perm2decomp(comp, 'c'); compose(s0, si_1);
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); perm2decomp(comp, 'c'); compose(s0, si_1);
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); perm2decomp(comp, 'c'); compose(s0, si_1);
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); perm2decomp(comp, 'c'); compose(s0, si);
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp;perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
library(PerMallows)
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 6; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
n = 8; si=runif.permutation(1, n); s0=runif.permutation(1, n); s0_1 = inverse.perm(s0); si_1 = inverse.perm(si); si; si_1; s0; s0_1;comp = compose(si, s0_1); comp; inverse.perm(comp);compose(s0, si_1); perm2decomp(comp, 'c');
is.permutation(perm=sigma)
library('PerMallows')
sigma <- c(1,5,6,4,2,3)
v
version
library(PerMallows)
library(PerMallows)
sigma <- c(1,5,6,4,2,3)
sigma
is.permutation(perm=sigma)
is.permutation(c(0,1,5,4,2,3))
is.permutation(c(1,8,9,2,5,3))
identity.permutation(perm.length=6)
runif.permutation(n=2,perm.length=6)
permutations.of(perm.length=3, alert=FALSE)
permutations.of(perm.length=10)
sample = read.perms(path)
data('data.order')
data.order
order.ratings(ratings=data.order)
sigma <- c(1,5,6,4,2,3)
pi <- c(3,5,1,2,6,4)
compose(perm1=sigma, perm2=pi)
compose(perm1=sigma, perm2=pi)
compose(perm1=pi, perm2=sigma)
tau <- c(2,1,3,4)
data("perm.sample.small")
compose(perm1=perm.sample.small,perm2=tau)
data('data.apa')
freq.matrix(perm=data.apa)
inverse.perm(perm=sigma)
inverse.perm(inverse.perm(c(1,4,5,3,2)))
swap(perm=identity.permutation(6),i=1,j=3)
insert(perm=identity.permutation(6), i=5, j=2)
inversion(perm=identity.permutation(6), i=1)
pi
sigma
distance(perm1=sigma, perm2=pi, dist.name='cayley')
distance(perm1=sigma, perm2=pi, dist.name='h')
sigma
v.vector <- perm2decomp(perm=sigma, dist.name='k')
v.vector
x.vector <- perm2decomp(perm=sigma, dist.name='c')
x.vector
h.vector <- perm2decomp(perm=sigma, dist.name='h')
h.vector
decomp2perm(vec=v.vector, dist.name='kendall')
decomp2perm(vec=x.vector, dist.name='cayley')
decomp2perm(vec=h.vector, dist.name='hamming')
cycles <- perm2cycles(perm=sigma)
cycle2str(cycles)
cycles2perm(cycles=cycles)
count.perms(perm.length=6,dist.value=2,dist.name='ulam')
num.cycles <- 1
len <- 6
count.perms(perm.length= len ,dist.value = len - num.cycles,dist.name='c')
count.perms(perm.length = len, dist.value = len, dist.name="hamming")
rdist(n=4, perm.length=5,dist.value=3,dist.name='ulam')
cycles <- 2
rdist(n=3, perm.length = len, dist.value = len - cycles, "cayley")
rdist(n=3, perm.length = len, dist.value = len, "hamming")
lmm(data.apa)
data('perm.sample.med')
lgmm(perm.sample.med,dist.name='hamming')
my.mm <- lmm (data=perm.sample.med , dist.name = 'cayley', estimation = 'exact')
my.gmm<- lgmm(data=perm.sample.med , dist.name = 'cayley', estimation = 'approx')
my.mm
my.gmm
lmm (data=perm.sample.med , sigma_0_ini= c(6,5,4,3,2,1), dist.name = 'cayley', estimation = 'exact')
lmm.theta(data=perm.sample.med , sigma_0= identity.permutation(6),
dist.name = 'ulam')
lgmm.theta(data=perm.sample.med ,
sigma_0 = c(2,1,6,5,3,4))
rmm (n=3, sigma0=my.mm$mode,  theta=my.mm$theta)
rgmm(n=3, sigma0=my.gmm$mode, theta=my.gmm$theta, dist.name='c')
rmm(n=4, sigma0=my.gmm$mode, theta=my.mm$theta, dist.name='u', sampling.method='distances')
dmm(perm=my.mm$mode, sigma0=my.mm$mode, theta=my.mm$theta, dist.name='ulam')
dmm(perm=sigma, sigma0=my.mm$mode, theta=my.mm$theta, dist.name='hamming')
dgmm(perm=my.gmm$mode, sigma0=my.gmm$mode, theta=my.gmm$theta, dist.name='kendall')
dgmm(perm=sigma,       sigma0=my.gmm$mode, theta=my.gmm$theta, dist.name='kendall')
apa.mm <- lmm(data.apa)
log.prob <- apply(data.apa, MARGIN=1, FUN=function(x){log(dmm(x,apa.mm$mode, apa.mm$theta))})
sum(log.prob)
apa.gmm <- lgmm(data.apa)
log.prob <- apply(data.apa, MARGIN=1, FUN=function(x){log(dgmm(x,apa.gmm$mode, apa.gmm$theta))})
sum(log.prob)
expectation.mm(theta=3,perm.length=9, dist.name='ulam')
expectation.gmm(c(1.1,2,1,0.2,0.4),dist.name='cayley')
marginal(h=c(1,0,NA,0,NA), theta= c(1.1,2,1,0.2,0.4))
generate.aux.files( perm.length = 6 )
count.perms(perm.length=6, dist.value=4, dist.name='ulam', disk=TRUE)
lmm(data=perm.sample.med, dist.name='ulam', disk=TRUE)
rmm(n=3, sigma0=identity.permutation(6), theta=1, dist.name='u',disk=TRUE)
path = system.file("test.txt", package='PerMallows')
sample = read.perms(path)
version
version
library(PerMallows)
permutations.of(5)
permutations.of(5)[1,]
library(PerMallows)
brutal()
library(PerMallows)
brutal()
brutal()
library(PerMallows)
brutal()
library(PerMallows)
brutal()
library(PerMallows)
library(PerMallows)
brutal()
library(PerMallows)
brutal()
brutal()
library(PerMallows)
library(PerMallows)
brutal()
library(PerMallows)
brutal()
brutal()
library(PerMallows)
library(PerMallows)
library(PerMallows)
brutal()
library(PerMallows)
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
library(PerMallows)
brutal()
brutal()
library(PerMallows)
library(PerMallows)
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
library(PerMallows)
brutal()
library(PerMallows)
brutal()
library(PerMallows)
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
brutal()
library(PerMallows)
perm2decomp(c(1,2,4,3,5))
decomp2perm(c(3,2,0,0))
decomp2perm(c(3,4,2,3,1,1,0,0))
library(PerMallows)
library(PerMallows)
rgmm(2,c(1,2,3,4,5),c(-1,-1,-1,-1),"cayley", "multistage")
samp=rgmm(6,c(1,2,3,4,5),c(-1,-1,-1,-1),"cayley", "multistage")
samp
lgmm(data, dist.name="cayley", estimation="exact")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(60,c(1,2,3,4,5),c(-2,-2,-2,-2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(200,c(1,2,3,4,5),c(-2,-2,-2,-2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(200,c(1,2,3,4,5),c(-2,-2,-2,4),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(200,c(1,2,3,4,5),c(2,2,2,2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(200,c(1,2,3,4,5),c(2,2,2,2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm.theta(samp, dist.name="cayley")
, sigma_0=c(1,2,3,4,5)
sigma_0=c(1,2,3,4,5)
lgmm.theta(samp, dist.name="cayley", sigma_0=c(1,2,3,4,5))
lgmm.theta(samp, dist.name="cayley", sigma_0=c(1,2,3,5,4))
samp=rgmm(200,c(1,2,3,4,5),c(-2,-2,-2,-2),"cayley", "multistage")
samp=rgmm(600,c(1,2,3,4,5),c(2,2,2,2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(900,c(1,2,3,4,5),c(2,2,2,2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(1000,c(1,2,3,4,5),c(2,2,2,2),"cayley", "multistage")
samp
samp=rgmm(1000,c(1,2,3,4,5),c(2,2,2,2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(10000,c(1,2,3,4,5),c(2,2,2,2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(10000,c(1,2,3,4,5),c(-2,-2,-2,-2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(100000,c(1,2,3,4,5),c(-2,-2,-2,-2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(1000,identity.permutation(8),c(-2,-2,-2,-2,-2,-2,-2),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
lgmm(samp, dist.name="cayley", estimation="exact")
lgmm.theta(samp, dist.name="cayley", sigma_0=identity.permutation(8))
samp=rgmm(1000,identity.permutation(8),c(-20,-20,-20,-20,-20,-20,-20),"cayley", "multistage")
lgmm.theta(samp, dist.name="cayley", sigma_0=identity.permutation(8))
samp=rgmm(1000,identity.permutation(8),c(-4,-4,-4,-4,-4,-4,-4 ),"cayley", "multistage")
lgmm.theta(samp, dist.name="cayley", sigma_0=identity.permutation(8))
lgmm.theta(samp, dist.name="cayley", sigma_0=identity.permutation(8))
lgmm.theta(samp, dist.name="cayley"
)
lgmm.theta(samp, dist.name="cayley")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(1000,identity.permutation(8),c(-4,-4,-4,-4,-4,-4,-4 ),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
samp=rgmm(1000,identity.permutation(8),c(-4,-4,-4,-4,-4,-4,-4 ),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
samp=rgmm(1000,identity.permutation(8),c(-4,-4,-4,-4,-4,-4,-4 ),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(1000,identity.permutation(8),c(-4,-4,-4,-4,-4,-4,-4 ),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(1000,identity.permutation(5),c(-1,-1,-1,-1 ),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
samp=rgmm(1000,identity.permutation(5),c(-1,-1,-1,-1 ),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
samp=rgmm(1000,identity.permutation(5),c(-1,-1,-1,-1 ),"cayley", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
samp=rgmm(1000,identity.permutation(5),c(-1,-1,-1,-1 ),"k", "multistage")
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")
library(PerMallows)
lgmm(samp, dist.name="cayley", estimation="exact")

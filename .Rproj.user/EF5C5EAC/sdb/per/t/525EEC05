{
    "contents" : "//\n//  Ferrers_diagram.cpp\n//  perms_mallows\n//\n//  Created by Ekhine Irurozki on 08/07/13.\n//  Copyright (c) 2013 Ekhine Irurozki. All rights reserved.\n//\n\n#include \"Ferrers_diagram.h\"\n\n#include <R.h>\n\nvoid Ferrers_diagram::random_SYT(){\n    //ï¿¼A Probabilistic Proof of a Formula for the Number of Young Tableaux of a Given Shape\n    //by Greene, Nijenhuis and Wilf\n    int     n_count = partition_of_n_;\n    int     rand_cell;\n    int     corner_i, corner_j;\n    init_tables_for_random_SYT_generation();\n\n    do{\n        //rand_cell = rand() % n_count;\n        rand_cell = (int) (unif_rand() * n_count);\n        walk(rand_cell, &corner_i, &corner_j);\n        syt_[corner_i][ corner_j ] = n_count;\n        n_count --;\n        //if just one box in last row, delete row\n        if (corner_i + 1 == ferrers_shape_length_dynamic_ && corner_j == 0) ferrers_shape_length_dynamic_--;\n        //delete box\n        ferrers_shape_dynamic_[corner_i ] --;\n        //SYT_toStr();\n    }while (n_count > 0);\n    \n}\n\nvoid Ferrers_diagram::walk(int rand_cell, int *cell_i, int* cell_j){\n    //get i j for the random cell\n    int c_i = 0 , c_j = 0  ; // cell position\n    int hook_right, hook_bottom; //to count the number of cells to the right and bottom\n    int cont = 0;\n    int ran ;\n    bool enc = false, is_dynamic_corner;\n    for (int i = 0 ; (!enc && i < ferrers_shape_length_dynamic_ ) ; i++)\n        if (rand_cell  < ferrers_shape_dynamic_[ i ]){\n            c_i = i ;\n            c_j = rand_cell;\n            enc = true;\n        }else rand_cell -=  ferrers_shape_dynamic_[ i ];\n\n    is_dynamic_corner  = ferrers_shape_dynamic_[ c_i ] ==  ( c_j + 1)\n    && (c_i == ferrers_shape_length_dynamic_ - 1 || ferrers_shape_dynamic_[ c_i + 1 ] <=  c_j );\n    while ( !is_dynamic_corner ){\n        hook_right = ferrers_shape_dynamic_[ c_i ] - c_j - 1;\n        cont = c_i + 1;\n        hook_bottom = 0 ;\n        while (cont < ferrers_shape_length_dynamic_ && c_j < ferrers_shape_dynamic_[ cont++ ] )\n            hook_bottom ++;\n        ran = (int) (unif_rand() * (hook_right + hook_bottom ) );\n        //ran = rand() % (hook_right + hook_bottom ) ;\n        if ( ran < hook_bottom ) c_i += ran + 1;\n        else c_j += ran - hook_bottom + 1;\n        is_dynamic_corner  = ferrers_shape_dynamic_[ c_i ] ==  ( c_j + 1)\n            && (c_i == ferrers_shape_length_dynamic_ - 1 || ferrers_shape_dynamic_[ c_i + 1 ] <=  c_j );\n    }\n    *cell_i = c_i;\n    *cell_j = c_j;\n    \n}\n\nlong double Ferrers_diagram::calculate_hook_length(long double n_factorial){\n//    Generic gen;\n    if( hook_length_ == -1 ){\n        hook_length_ = 1 ;\n        long double cell_hook;\n        for (int i = 0 ; i < ferrers_shape_length_; i ++){\n            for (int j = 0 ; j < ferrers_shape_[ i ]; j++) {\n                cell_hook = ferrers_shape_[ i ] - j + get_num_cells_down(i, j) - 1;\n                hook_length_ = hook_length_ * cell_hook;\n            }\n        }\n        hook_length_ = n_factorial/ hook_length_;\n        number_of_permutations_ = hook_length_ * hook_length_;\n    }\n    return hook_length_;\n}\n\nint Ferrers_diagram::get_num_cells_down(int i, int j){\n    //returns only the ones below AND itself\n    int num_cols_down = 0 ;\n    while ( i < ferrers_shape_length_ && ferrers_shape_[ i ] > j ){\n        num_cols_down++;\n        i++;\n    }\n    return num_cols_down;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1410607400283.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2869088418",
    "id" : "525EEC05",
    "lastKnownWriteTime" : 1410607422,
    "path" : "~/Dropbox/permus/prj/R/PerMallows/src/Ferrers_diagram.cpp",
    "project_path" : "src/Ferrers_diagram.cpp",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "cpp"
}